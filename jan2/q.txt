2559. Count Vowel Strings in Ranges
Solved
Medium
Topics
Companies
Hint
You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: words = ["aba","bcb","ece","aa","e"], queries = [[0,2],[1,4],[1,1]]
Output: [2,3,0]
Explanation: The strings starting and ending with a vowel are "aba", "ece", "aa" and "e".
The answer to the query [0,2] is 2 (strings "aba" and "ece").
to query [1,4] is 3 (strings "ece", "aa", "e").
to query [1,1] is 0.
We return [2,3,0].
Example 2:

Input: words = ["a","e","i"], queries = [[0,2],[0,1],[2,2]]
Output: [3,2,1]
Explanation: Every string satisfies the conditions, so we return [3,2,1]
-------------------------------------
Solution
Overview
We are given a 2D queries array where each query specifies a range [l, r] (inclusive). For each query, we need to count how many strings in the words array start and end with a vowel and have an index within the specified range. These strings are referred to as "vowel strings." In other words, for each query, we need to count the number of vowel strings within the subarray words[l:r].

We will go through a solution that can perform this count efficiently for all queries.

Approach: Prefix Sum
Intuition
A brute force approach to calculate the answer for each query [l, r] would involve iterating through the subarray words[l:r] and counting how many vowel strings we find. We can use a set to containing all vowels (a, e, i, o, u) to quickly check if a string is a vowel string in constant time, O(1).

However, this approach is slow as it requires us to iterate through a portion of words for every query. If many queries contain a long range, this will be an expensive operation. Furthermore, a lot of work is repeated since many elements will be visited many times across queries.

For a more optimized approach, we can first perform some precomputations on words. Specifically, we can create a prefix sum array prefixSum to store the cumulative counts of vowel strings in words. prefixSum[i] would contain the total number of vowel strings from the first element of the array up to index i (the prefix array words[0:i]). Populating this prefixSum array would only take one linear scan across words as we maintain a cumulative sum while iterating through words.

Having this prefixSum array will allow us to answer each query very quickly. The key insight here is that the number of vowel strings that fall between a query range [l, r] can be found by subtracting the cumulative sum up to index l-1 from the cumulative sum up to index r: prefixSum[r] - prefixSum[l - 1].

Why subtract prefixSum[l - 1]?
Note that we look at the lower boundary l - 1 instead of l because the range is inclusive. The prefix sum array represents the cumulative count of vowel strings up to each index. By subtracting prefixSum[l - 1], we ignore all the vowel strings that have appeared before index l in our count and include only those within the range [l, r].

Let's look at an example:

We have prefixSum = [0, 1, 2, 2, 3, 3, 4].
Our query range is [1, 5].
Taking a look at prefixSum:

The total number of vowel strings right before the start of the range is prefixSum[0] = 0
The total number of vowel strings right at the end of the range (index 5) is prefixSum[5] = 3.
This then means that prefixSum[5] - prefixSum[0] will give us the number of vowel strings that have appeared in the range [1, 5], yielding an answer of 3 vowel strings.

Algorithm
Declare our answer array ans.
Initialize our set of vowels vowels to contain the vowel list [a, e, i, o, u].
Declare our prefix sum array prefixSum to store the cumulative sum of vowel words up to each index.
To fill in prefixSum, loop through each word in words:
For each word, check if the first and last letter of word is in vowels. If so, we have found a new vowel string so we increment sum++.
Fill in the prefix count: prefixSum[i] = sum
Loop through each query in queries:
- Check if the left bound queries[i][0] is 0. If it is, then the answer is simply the cumulative count of vowel strings up to index i: ans[i] = prefixSum[queries[i][1]]
- Otherwise, ans[i] = prefixSum[queries[i][1]] - prefixSum[queries[i][0] - 1]
Return answer array ans containing answers for all queries.